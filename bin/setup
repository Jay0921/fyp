#!/usr/bin/env ruby
require "fileutils"

# path to your application root.
APP_ROOT = File.expand_path('..', __dir__)

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

FileUtils.chdir APP_ROOT do
  # if ENV['DOCKER']
    puts '== Setting up docker environment =='

    system! 'cp bin/docker/bashrc.example bin/docker/bashrc'
    system! 'cp config/settings/docker.yml config/settings/development.local.yml'
    system! 'cp config/settings/docker.yml config/settings/test.local.yml'
    system! 'chmod +x entrypoints/app-entrypoint.sh'

    system! 'docker-compose build app'
    system! 'docker-compose run backend bin/rails db:setup'
    system! 'RAILS_ENV=test docker-compose run backend bin/rails db:setup'
  # else
  #   # This script is a way to set up or update your development environment automatically.
  #   # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  #   # Add necessary setup steps to this file.

  #   puts '== Installing dependencies =='
  #   system! 'gem install bundler --conservative'
  #   system('bundle check') || system!('bundle install')

  #   # Install JavaScript dependencies
  #   system! 'bin/yarn'

  #   # puts "\n== Copying sample files =="
  #   # unless File.exist?('config/database.yml')
  #   #   FileUtils.cp 'config/database.yml.sample', 'config/database.yml'
  #   # end

  #   puts "\n== Preparing database =="
  #   system! 'bin/rails db:prepare'

  #   puts "\n== Removing old logs and tempfiles =="
  #   system! 'bin/rails log:clear tmp:clear'

  #   puts "\n== Restarting application server =="
  #   system! 'bin/rails restart'
  # end
end
